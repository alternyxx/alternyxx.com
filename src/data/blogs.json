{
    "blogs": [
        {
            "title": "A year of programming",
            "shortDescription": "It's been a year since I started programming! I wanted to share my journey and recap what I've done during my first year of programming. From starting with Python all the way back in July of 2024 and making some projects in it; then doing web development in November while also getting involved with shaders; and my exploration of machine learning so far as well as my plans for the year to come!",
            "flairs": ["Tech", "Life"],
            "date": "June 23rd",
            "text": "# Sections\n\n<!-- i wonder if this ends up in the code, probably does... but hii if youre reading this :3. i like to comment code and so commented this too xD. kinda creepy u checking ts out tho,,, -->\n<!-- also dont question the seemingly random newlines, i use them to break apart at points in my editor... well, im probably just used to my notepad ways... -->\n\nQuick side notes: this is a particularly long blog I'd say, but I tried to recap my entire 1 year journey and exactly what I did. It's also the first ever blog that I've written so the writing may be iffy here and English isn't my first language. I hope you'll be able to excuse me for that. Another thing is the background... While it doesn't really affect my own reading experience, in the case that it affects yours, do give me some feedback and for now, you can turn it off by pressing the menu button on the top left corner and then pressing 'Disable shaders'.  Anyhow, here's all the main things, to which you can click to skip to that point ^^  \n\n[The Fateful Day](#june-23-2024)  \n[CS50P Final Project](#CS50P-Final-Project)  \n[Side Projects](#Side-Projects)  \n[Web Development](#Web-Development)  \n[Machine Learning](#Machine-Learning)  \n\n# July 8th, 2024\n\nI've been programming for exactly a year now. And it all started on July 8<sup>th</sup> when I just so happened to stumble upon a course by Harvard University, [CS50P](https://cs50.harvard.edu/python/2022/). Back then, I had no idea what programming was. How any of the programs I had were running, how I could make my own nor how my computer worked. I had the slightest clue on what anything was. I went in, with nothing in mind, not even of if computer science interested me or not. Out of curiosity, I ended up watching the first lecture, lecture 0, my very first introduction to Python, and then followed the steps given by the course to set up a development environment with a link they had given. And there, as anyone would...  \n\n<!-- this is done to add padding to the code elements since padding with css didnt seem to work... -->\n\n<br>\n\n```python\nprint(\"hello, world\")\n```\n\n<br>\n\nthe very first program of everyone who has gotten into this field!  \n\nI remember struggling with the very first problem set given: datatypes, methods and particularly functions. It was a very foreign concept, how local variables worked inside them, how return values worked, nothing, and I mean nothing clicked. I was given an explanation by a cousin of passing by reference and passing by value. All I got from that lecture was how to return variables. (Though, I do still think trying to explain references to someone who had just started Python is a bit ridiculous from his behalf)  \n\n<br>\n\n```python\ndef add_two(number):\n    number = number + 2\n\nnumber = 5\nadd_two(number)\nprint(number)\n```\n\n<br>\n\nI think a lot of people struggle with the above code on the first few weeks, thinking that `number` would become 7. At least I struggled with it up until a whole month of programming in Python where I just got used to the semantics. Of course, you would later learn that that would be true if `number` was a pointer (ignoring that you'd have to deference it). I actually also happen to run into having arrays as function parameters and being confused by why it got modified when just modifying inside the function and just blaming it on Python xD.  \n\nThat aside, though overwhelmed by the information provided on the very first day, I somehow managed to submit my first ever problem on the same day and I copied pasted the code I wrote as is.  \n\n<br>\n\n```py\nindoor=str.lower(input('Say something '))\nprint(indoor)\n```\n\n<br>\n\nA program that simply takes an input and returns the lower case version, appropriately titled indoor voice!  \n\nI went on to spend hours on the course, every single day and free time I had, I would spend on whatever problem set or learning material. Binge a lecture, mess around with what you learn, have some fun and then spend a *LOT* of time trying my best on the problems. And within a month, I had reached my very first project assignment.  \n\n# CS50P Final Project\n\nI had many ideas for this but I ended up settling with a rhythm game. Mostly because I thought the introductory music of CS50 would've been really fun to play. I also happened to find [pygame](https://www.pygame.org/docs/), which seemed to be an interesting library for making games. In case you don't know what a rhythm game is, it's where you press keys according to the rhythm of the music playing. I expected to finish this in a week at most, as I had finished the other problems in a day on average. Plus, I had a solid structure of how I'd structure my code. With the classes in mind that I just needed to write, this was going to be a breeze.  \n\n### Oh how very wrong I was\n\n<div class=\"lg:flex\">\n    <p style=\"text-align: center;\">\n        I had underestimated how time consuming an actual project takes. This was my first time ever having to explore how a library worked on my own and I STRUGGLED to read the documentation due to my inexperience (the pygame documentation is not to blame here, they're really REALLY intuitive and easy to understand). I followed a series on youtube for how the library worked and would use the functions I learnt. This 'animation' took a week alone. (AND I DIDN'T EVEN END UP USING IT SINCE I THOUGHT IT WAS TOO GOOFY)\n    <p>\n    <video src=\"/blogs/A-year-of-programming/duck.mp4\" alt=\"Duck Animation\" controls controlslist=\"nofullscreen nodownload noremoteplayback noplaybackrate\" disablepictureinpicture class=\"video-anim\"></video>\n</div>\n\nI hadn't even began on anything aside from that and it's already been a week. It was dreadful. I continued on to create the actual gameplay as I envisioned and after the structure, it came time to write the code. The first implementation I bootstrapped got a staggering 2 fps before proceeding to crash. It worked for tiny examples with around 10 instances of the Note class, but when it came to thousands that I required, it would fail. It was obvious what I needed to do. Optimization. So, I would implement an approach to only have few instances of the class at a time and would implement the logic painstakingly. One unexpected thing was the time it took to create the assets for a game. I would have to go in Gimp and learn how to do pixel art. Moreover, one thing about the process of creating a game is that you'd have to redo it every so often just because it bothers you one time. Another aspect is the menus. Each one is TEDIOUS to create, aligning each pixel by value and writing ridiculous code to make it work.\n\n<br>\n\n```python\n    end.blit(scoreS, (0, 0))\n    end.blits(((header.render(chart, True, (0, 0, 0)), (33, 22)), (header.render(chart, True, (255, 255, 255)), (22, 22)),\n        (header.render(str(score), True, (0, 0, 0)), (138, 143)), (header.render(str(score), True, (255, 255, 255)), (132, 143)),\n        (header.render(str(accuracy).rjust(6) + '%', True, (0, 0, 0)), (1150, 143)), (header.render(str(accuracy).rjust(6) + '%', True, (255, 255, 255)), (1144, 143)),\n        (judge.render(str(vals['Marvelous']), True, (0 ,0, 0)), (732, 297)), (judge.render(str(vals['Perfect']), True, (0, 0, 0)), (732, 462)),\n        (judge.render(str(vals['Great']), True, (0, 0, 0)), (732, 627)), (judge.render(str(vals['Mediocre']), True, (0, 0, 0)), (1524, 297)),\n        (judge.render(str(vals['Terrible']), True, (0, 0, 0)), (1524, 462)), (judge.render(str(vals['Miss']), True, (0, 0, 0)), (1524, 627)),\n        (judge.render(str(vals['Marvelous']), True, (255, 255, 255)), (726, 297)), (judge.render(str(vals['Perfect']), True, (255, 255, 255)), (726, 462)),\n        (judge.render(str(vals['Great']), True, (255, 255, 255)), (726, 627)), (judge.render(str(vals['Mediocre']), True, (255, 255, 255)), (1518, 297)),\n        (judge.render(str(vals['Terrible']), True, (255, 255, 255)), (1518, 462)), (judge.render(str(vals['Miss']), True, (255, 255, 255)), (1518, 627))))\n    self.screen.blit(end, (0, 0))\n    pygame.display.flip()\n```\n\n<br>\n\nI said I had a solid structure thought of and... I kinda did for the actual gameplay, but the menus... did I not think each one would be so tedious. I ended up with a Menu superclass that spanned 500 lines with each menu being a function. Even if I could share the code, I wouldn't since I'm genuinely embarassed of how it is structured xD, at least without a refactor. All in all, it took two months, and I still don't quite know how to feel that it took that amount of time... Was I proud of the final product either? Not really... I had many more things that I wanted to do, but the time simply did not allow it... Below is a video I made to submit the project and finish CS50P, alongside the certificate I was given.  \n\n<div style=\"text-align: center;\">\n    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/HUAXqMmH8kg?si=he5KS938VNld3pb6\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n</div>\n\n# Side Projects\n\n## Systems Programming\n\nHaving finished CS50P, naturally, I moved onto CS50x, the more general introductory programming course. The first half of it focused on the low level language, C. On weeks 4, the lecture was about memory, and here I would learn about how everything would work under the hood. Pointers pointing to memory addresses, the stack and the heap, overflows, memory leaks, all those shenanigans, which to this day I struggle with. The following week, week 5, was about data structures and I just couldn't complete the hash table problem at the time, so I gave up on CS50x for the time being.  \n\nMonths later, I grew a sudden interest in Assembly (mainly with the precedence that it would've been cool to learn). So I dove head first into x86_64 Assembly. Learning Assembly has to be one of the most fun things you can do on your journey in computer science. Finding out about registers or figuring out syscalls or the way that code in high level languages implemented it's feature in Assembly really makes you appreciate them a lot more. I mess around with interesting syscalls I could find, as well as reimplement many of the common tooling we take for granted and it refueled my passion when I was sort of running out at the time. Sadly, as much as I want to make something originally in Assembly, I just can't find a reason to and at most, I would at least resort to the standard C library so, might as well just write C at that point.  \n\nLater in this blog, you'll see me mention learning rust as just a passing note but a LOT of confusion went into me understanding ownership and borrowing. Spoilers but somewhat funny: I wrote minimax for TicTacToe in rust, and I wrote how I would in Python with just the syntax difference and it... worked! No references, no nothing, just passing the raw `[i16; 9]` and reading it back was the most hilarious thing ever. I learnt rust without the (amazing) [book](https://doc.rust-lang.org/book/ch00-00-introduction.html) by the rust foundation and with just the errors the compiler threw at me and following the suggestions and looking them up. It wasn't the best way, but it made me love rust since I could just write whatever crap code and fix it as the compiler tells me to. (and be frustrated by how I had designed my code months later but shhh, I don't wanna talk about that).  \n\n## Transpiler\n\nDuring this time, I had a particular problem that I wanted to solve, and it was to be able to stop writing pseudocode.  \n(Side rant: pseudocode is absolutely a dumb concept. It achieves nothing but to annoy people with each version's weird semantic arbitary rules.)  \nSo, I decided to work on a transpiler. You people out there whom have worked on their own will know it's absolutely a terrible idea but I didn't know that! So, I started naively writing it and ended up with hilarious code as you'd expect.\n\n<br>\n\n```python\nfor result_line in self.pseudocode:\n    # Variables and arrays\n    if var_set := fullmatch(rf\"{indent}SET{space}({var_index}){space}TO{space}({value}|{string}|{array})({end_of_line})\", result_line):\n        self._transpiled += f\"{indent}{var_set.group(1)} = {var_set.group(2)}{str(var_set.group(3) or \"\")}\"\n\n    # Empty lines / Comments\n    elif empty_line := fullmatch(rf\"({end_of_line})\", result_line):\n        self._transpiled += f\"{str(empty_line.group(1) or \"\")}\"\n\n    # Input / Output\n    elif print_function := fullmatch(rf\"{indent}SEND{space}({value}|{string}|{array}){space}TO{space}DISPLAY({end_of_line})\", result_line):\n        self._transpiled += f\"{indent}print({print_function.group(1)}){str(print_function.group(2) or \"\")}\"\n\n    elif input_function := fullmatch(rf\"{indent}RECEIVE{space}({var_index}){space}FROM{space}(\\(STRING\\)|\\(INTEGER\\)|\\(CHARACTER\\)){space}KEYBOARD({end_of_line})\", result_line):\n        if input_function.group(2) == \"(INTEGER)\":\n            self._transpiled += f\"{indent}{input_function.group(1)} = int(input()){str(input_function.group(3) or \"\")}\"\n        else:\n            self._transpiled += f\"{indent}{input_function.group(1)} = input(){str(input_function.group(3) or \"\")}\"\n\n    # Selection\n    elif if_condition := fullmatch(rf\"{indent}IF{space}({condition}){space}THEN({end_of_line})\", result_line):\n        self._transpiled += f\"{indent}if {str(Condition(if_condition.group(1)))}: {str(if_condition.group(2) or \"\")}\"\n        indent += \"    \"\n```\n\n<br>\n\nAs cool as the code looked for screenshots, it was dumb; I can't explain the black magic happening with all the regex matches and groups and whatever logic there is. I got burnt out from navigating the endless if statements trying to figure out which translates to which and looked into how other people have solved the problem. There, I figured out no one wrote a transpiler like this, it was by constructing an [abstract syntax tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) from 'parsing' the code, and then doing the translation from predefined nodes.  \n\nI read up a TON about this - [lexing](https://en.wikipedia.org/wiki/Lexical_analysis), types of parsers: [LL(1)](https://en.wikipedia.org/wiki/LL_parser), [LR(1)](https://en.wikipedia.org/wiki/LR_parser), [PEG](https://en.wikipedia.org/wiki/Parsing_expression_grammar), ways to describe grammers: .bnf, .ebnf, .peg, the [visitor pattern](https://en.wikipedia.org/wiki/Visitor_pattern); basically, I was **interested**... and somehow that led to me being overambitious and somehow expanding the project into something like a universal transpiler. I mean, the idea was somewhat sensible. Have every possible node internally and then generate a parser at runtime to then transpile to a target grammar. Problem was that implementing is *pain*. I just honestly gave up.  \n\nSo, burnt out, I would move onto something else that had interested me at the time, web development.\n\n# Web Development\n\n## HTML, CSS, Typescript & React\n\nIn November, I started to become intrigued by the prospect of developing websites. Having a dedicated website for myself sounded fun, and so I looked into how I could get started. As usual, I first checked where I had first set foot, CS50, and found that it had a dedicated course for exactly this, CS50W. I watched the first lecture and I **STRUGGLED** with HTML and CSS. I struggled to read basic HTML code and when I tried to write my own, I couldn't, not even a line. I think it was the unfamiliar syntax alongside the long files that threw me off.  \n\nAt the time though, I had thought that frameworks, such as Angular or React, made writing HTML and CSS easier. Now in hindsight, this isn't really true, but I would say that it did solve the problems I had. Anyhow, I decided to learn React and looked around for how to get started. That eventually led me to this React crash course on the freecodecamp channel. This does mean that I had zero prior Javascript experience before learning a Javascript library, but I do think that the syntax and it's concepts were already familiar enough. I didn't have much trouble doing it this way either and I'd even say it made me a lot more familiar with the HTML and the CSS since the instructor was quite amazing.  \n\nNow an annoying thing did happen where I was trying to learn from a 4 year old course, and many many things were failing, but I managed to follow it through halfway or so. That was when the freecodecamp channel released the updated version of the course for React 19, and so I ended up having to rewatch since many things were changed. I ended up binging the course albeit ill-advised by the instructor. I didn't find the follow-along projects that interesting, nor was setting up the environment for them easy. I didn't do anything noteworthy with React either. Though I did get into the Typescript enviroment by just migrating all my .jsx files into .tsx in a vite react environment and by monkeypatching the errors thrown at me. And immediatly afterwards, I ended up finding something that piqued my interest.  \n\n## WebGPU\n\nDuring this time, I found a webpage that looked really interesting to me. So using the profound knowledge I had gathered from having learnt some web dev, I inspected the elements and found that it was using something called a canvas element with absolute positioning to put text in front, making it really eye-catchy. I read more into canvas and found out about WebGL, and looking back at the website it had [GLSL](https://en.wikipedia.org/wiki/OpenGL_Shading_Language) shaders. Looking into it more, I also found another more modern alternative to WebGL called WebGPU. Well, it being more trendy made me stick to it.  \n\nI really really wanted to stick to React, but making a proper canvas element in React is... weird, especially for someone whom had just started with it. Attaching a ref to the canvas, and getting the context in the useEffect and then doing everything else there. Not to mention getting the [GPUDevice](https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice) for WebGPU in an async function... Fun fact about that, I initially just straight up fetched the device in my index.tsx, basically the starting file where almost nothing is supposed to be, and then passed it into the App and for a long LONG time, I thought this was the only way to do it xD. Anyhow, this makeshift Canvas component basically became my dev enviroment for everything that followed suit. By that, [this codelab](https://codelabs.developers.google.com/your-first-webgpu-app) that delves into the semantics of WebGPU. It's a really good tutorial that gets into buffers and shaders as well as the other stuff like bindings. The estimated reading time for that is 69 minutes (nice), but... lowkey I'd be so surprised if anyone without prior experience with graphics api, whom the codelab is targetted towards, is able to digest the information within it in that time. Me personally, it took me some days on and off, with a day spent at a local cafe just reading through the codelab and messing around to somewhat get what's going on. I didn't really document my time on this, so I have lost the issues I encountered during my time, but I think I was most confused about the buffers and the code structure. Though eventually, I finished the codelab, having created an implementation of Conway's Game of Life. \n\n<div style=\"text-align: center;\">\n    <video src=\"/blogs/A-year-of-programming/Conways-Game-of-Life.mp4\" alt=\"Conway's Game of Life\" controls controlslist=\"nofullscreen nodownload noremoteplayback noplaybackrate\" disablepictureinpicture></video>\n</div>\n\nHaving somewhat familiarized myself with what shaders are, of course, I started playing around with it. I also happened to see two videos on Youtube involving shaders which further inspired me. The first is this nicely edited, entertaining and informational [video by Carter Semrad](https://www.youtube.com/watch?v=QhvzmskRiCk). There's a nice segment where some shader compilations play at [01:54](https://youtu.be/QhvzmskRiCk?si=qPhJD6fuYX8ghe2X&t=114) and I ended up recreating that. You can see it for yourself upon [entry](/entry/blogs/A-year-of-programming/) to my own site. The [second by kishimisu](https://www.youtube.com/watch?v=f4s1h2YETNY) explained all the shenanigans you'd see in a fragment shader such as normalizing the coordinate plain (though wgsl does work differently from glsl a bit in that I have to reverse the y plane too), and ended up introducing me to [shadertoy](https://www.shadertoy.com/) too. I'm actually so bewildered by every single shader there and the shaders you see from me will never compare to the creativity on there. Anyhow, the background shader you're seeing is me applying the most basics of knowledge from that video.  \n\n<!-- erm... i just lowk had the below text in plain markdown n js copy pasted the rendered elements -->\n<div class=\"lg:flex\">\n    <img src=\"https://camo.githubusercontent.com/5983a8ddce0b9f757af2a729003ada9a8c0d51be96513773dd951af676d31b11/68747470733a2f2f7374617469632e616c7465726e7978782e636f6d2f6769662f766572746578646174612e676966\" alt=\"Blahaj Spinning\" class=\"video-anim\">\n    <p class=\"lg:text-center\">\n        I also happened to start looking into 3D rendering. Turns out, so much as a simple cube is <em>VERY</em> hard. But I managed to find a <a href=\"https://www.youtube.com/watch?v=ih20l3pJoeU\">series</a> on exactly this. Still though, the linear algebra involved with just rendering a 3D cube and then adding lighting to is... quite hard. Projection, normals, culling (though, this is thankfully handled with just an option in webgpu) and lighting... I followed along the series in my Canvas component dev environment and replicated the C++ code in wgsl and eventually did get this after many other scuffed renders. (I would love to put the scuffed renders I got somewhere but I literally don't know where to quite place them ;-;...)\n    <p>\n</div>\n\n<br>\n\n# The very website you're seeing!\n\nWithin a month of fiddling with web development, I had created the [home page](/) for the website you're at! I made a React App centered around the shaders I made and even added framer motion for \nanimations. The source code is available at [https://github.com/alternyxx/alternyxx.com](https://github.com/alternyxx/alternyxx.com), (though I *REALLY* do *NOT* recommend checking it out; oml the code and moreso the commit history, it's all a mess istg; there's even a commit where i `mv`ed the whole thing and so git just had +20k new lines but let's just not talk about it). I bought the domain via Cloudflare registrar, ran `npm build`, deployed it with Pages and that was that. Well... migrating to Workers 6 months later now was a pain but I guess it worked out fine from how you're being able to read this now.  \n\n# Machine Learning\n\n## How it began\n\nIt all started when I wanted to implement an interesting idea I had. While writing a random number generator function, I noticed that you could make a seemingly random number generator with just (x * n) % y, whereby x is the input, n is an arbitrary and y the range of values. So, my idea was to be able to have that 'random' function produce the best move for a state of a Tic Tac Toe board I'd give. It was gonna take a night or two at most, and I even decided to learn and do it in rust for the fun of it since I thought that writing this code in python would've been awfully slow.  \n\nIn the above equation, by plugging in y as 9, mapping 0 - 8 as a square in the board, came the search for the value of n that would give me the best move. (At the time, I didn't know a thing about modular arithmetic nor [primitive roots](https://en.wikipedia.org/wikiPrimitive_root_modulo_n), which could've been better...). But it soon came to a halt upon discovering the distribution was favored towards some number... After days of inspecting and wondering, I finally realized that it was because of this simple fact that upon making a move, the result ould be 'alternating'. For example, take a board position such as 111121111, wherein 1 is an empty space; 2 is an X and 3 will be O. If we were to think through the equation as the board progresses, we'll see that it ends up in a back and forth. So, currently 111121111 % 9 results in 1, and say, 311121111, 311121111 % 9 will result in 3. Then, 312121111 % 9 will result in 4, 312121311 % 9 will result in 6, 312221311 % 9 results in 7, ... See the pattern? The result of the expression is an increment of 1 if it's player 1's and an increment of 2 if it's player 2, meaning there's an inherent pattern to the mathematical expression, making training impossible. I did try to create a nonlinear function that'd create a mapping without this problem but at that point, it became way too confusing and wasn't working out and so, I had thought that the idea I had came up with had found its closing.  \n\n## The idea of using a neural network\n\nWhile scrolling through Youtube, I found [this video by 3b1b](https://youtu.be/aircAruvnKk?si=AGJwKxGhJMUucswN). It is worth noting that prior to this, I was very unfamiliar with what machine learning was \nor what neural networks are. But, upon watching the video, I came to realize that what was being done is something that is similar to the problem I had. Given an input vector, get an output vector \nback with a relatively simple process. Now, for those familiar, you could argue that using a neural network for this task is absolutely overkill, but I found it to be a lot simpler process than \nminimax. Plus, for the small implementation that I was trying to achieve, minimax was just not the solution since there's quite a few functions that need to be created.  \n\nWith this newfound knowledge and curiosity for investigating what neural networks are, I delved deeper and found [Neural Networks from Scratch](https://youtu.be/Wo5dMEP_BbI?si=gEu_Ryo0ApvTfAKr), \nwhich from my experience, is a great explanation of neural networks with great visualizations provided. While the series cover an implementation in Python, I decided to move it to the GPU side and \nimplement it in wgsl, just for the fun of it. Sadly, the YouTube series does end off before backpropagation, leaving me to scour for a lecture on backpropagation, ending me up \n[here](https://www.youtube.com/watch?v=sIX_9n-1UbM&t=636s&pp=ygUfYmFja3Byb3BhZ2F0aW9uIG5ldXJhbCBuZXR3b3Jrcw%3D%3D), allowing me to discover delta calculation and the such.\n\n## neuralnyx\n\nAt this point, it was too far back to rely on a machine learning library even if what I needed was a simple task... leaving me to start developing on [neuralnyx](https://github.com/alternyxx/neuralnyx), and create an implementation for all my uses (Though... I'd never recommend it for anyone else). After developing it for over two months and debugging obscure issues I come across, it now supports linear regression models with some activation functions, cost functions and optimizers. The training is done on the GPU side using compute shaders, with the exception of the optimizer, which is on the CPU. The development of this took two months, mainly because I tend to get distracted by some overly complex implementation, only to refactor it back. You can find all the info [here](https://crates.io/crates/neuralnyx), though I haven't worked on it for 3 months as of the time writing this...\n\n## TicTacToe in One Line of (Python) Code\n\nWith the library in hand, I now move onto what I started with. I had already constructed the expression required and just had the weights and biases left. And so, with just around 5 minutes of training, I put in the weights and biases into it. The result is the below one-liner, which you can copy and paste into a Python file or a Python interpreter and run it and will have a somewhat functional game of Tic Tac Toe!\n\n<br>\n\n```py\n{(B:=111111111,{print('{}│{}│{}\\n───┼───┼───\\n{}│{}│{}\\n───┼───┼───\\n{}│{}│{}'.format(*['   'if i=='1'else' X 'if i=='5'else' O 'for i in str(B)]))for _ in range(5)if(B:=B+4*10**abs(9-int(input())))and(y:=[2.7182**(sum(w[i][j]/100*max(0,[sum(v[k][l]/100*list(map(int, str(B)))[l]for l in range(9))+a[k]/100 for k in range(15)][j])for j in range(15))+b[i]/100)for i in range(9)])and(B:=B+8*10**y.index(max(y,key=lambda x:x/sum(y))))})for v,w,a,b in[([[-7,-30,-3,-37,-2,13,-11,28,-95],[120,160,-34,-41,145,16,-31,218,-19],[-120,-5,-130,195,-269,86,-166,-24,109],[14,-120,49,15,-130,15,-39,142,64],[23,129,-81,257,100,-48,-28,7,67],[-46,-46,73,-89,291,0,178,61,143],[-23,-23,-260,34,-158,16,212,-41,-278],[-2,86,169,98,47,-164,49,-245,250],[-95,-59,160,194,-80,99,-108,-154,-143],[12,2,68,55,-50,-71,216,216,-167],[47,242,166,-1,4,-81,199,-47,0],[32,40,-160,-167,189,122,199,22,22],[108,-184,41,67,172,21,47,115,-85],[-51,287,-344,62,-134,42,-244,26,-50],[-94,-59,-30,43,10,-40,-43,33,-102]],[[1,-4,7,-107,24,4,-11,-154,73,-12,123,-8,74,77,-156],[-3,-72,6,-343,38,-49,-4,6,85,-109,106,88,57,-96,-28],[0,202,257,0,-12,45,-21,-83,79,-243,8,-224,15,206,2],[40,88,-134,-76,2,-37,-24,126,-261,161,-92,31,-14,-382,36],[-7,-1,-208,265,30,-194,156,-24,41,32,131,82,-167,-177,4],[-30,153,-28,-23,-202,-5,74,80,170,54,-48,85,-40,75,-33],[-3,56,225,7,48,-99,-265,85,-223,131,-103,166,-23,-42,18],[23,-100,-131,187,-133,-44,284,195,-57,139,-250,125,287,-6,28],[4,-196,72,-11,160,348,-250,-307,67,3,85,-192,-275,233,-27]],[0,-166,159,438,-19,153,149,-46,-211,-103,36,-59,-330,67,1],[-269,40,-42,-89,169,92,26,-78,159])]}\n```\n\n<br>\n\nI think an explanation for this here is unwarranted and quite out of place but do let me know if you need it! I'd be more than happy to explain it personally to anyone.  \nAside from that, it isn't **perfect** as there's an issue in the dataset generation which I'm now too lazy to reimplement, so you might get a win here and then.  \n\n## Also in Desmos Graphing Calculator\nI implemented this in [Desmos Graphing Calculator](https://www.desmos.com/calculator/92xe1ionky) too, which I think is quite neat. Uh, would I count desmos as programming?... Not really?... But come on, I spent 20 hours straight on this. Again, an explanation for this here is unwarranted I think, but in case you're interested, I did leave explanations in the actual graph itself so you don't have to worry :D.  \n\n<br>\n\n![Tic Tac Toe in Desmos](https://i.redd.it/j1ejukqon4ye1.png)\n\n<br>\n\n## Further Study\n\nI did look into convolutional neural networks, as well as reinforcement learning but the limitations of neuralnyx are far too great to ignore. Due to it being my first time ever using compute shaders, the handling of data is... questionable. To elaborate, the main branch, the one that's used to release as a crate, stores the gradients of every sample in a batch, making it quickly hit bounds. For example, if the batch size were to be 128, then there's 128 separate gradients of each weight and bias. A quick reminder that a neural network, even a small ones, contains hundreds of thousands to billions of these parameters. So that multiplied by 128, quickly kills the available space. The dev branch does propose a solution whereby there's only a single instance by utilizing atomic floats and [compare and swap loops](https://en.wikipedia.org/wiki/Compare-and-swap) but it took two times to five times to compute for small neural networks, but roughly the same speed for larger ones, but I wasn't satisfied with the speed decrease. (Afterall, taking 30 seconds for a neural network to learn the sine function is a bit ridiculous...) I do have a solution in mind, which utilizes workgroups and a combination of both the approaches though, and I'll try to work on it again when I find the time and motivation!  \n\n# What's next?\n\nInitially when I started, I really wanted to make games. I mean, you could say that I made a game, sure... but that's with a library and I'd say it doesn't really count as a proper game. It's more to make a game with an engine, the type that could be released onto Steam. The problem? I can't quite understand the engines in the market right now. For example, nodes and scenes in the godot engine feels quite weird to me for example and I can't really understand how they're working. So, I'm hoping to maybe pick up a game engine this year.  \n\nAnother thing is to put in some more work into neuralnyx. I want it to be able to handle convolutional neural networks, as well as fix it's current issues, as well as bind the functions for it to be usable in other languages. I have been using Arch (just had to mention it) these past months and I have been getting used to it, so no commit has been made in 3 months sadly, but I'm hoping to fix that up soon.   \n\nLastly, more. programming. languages! They're honestly such a fun part! Picking up new syntaxes (as long as they're comprehensible, ehhh, actually, I love esolangs too I guess) is such an underrated aspect, especially ones that introduce new paradigms and not just moving from one OOP language to another. You learn so much stuff, and improve upon your previous code. I have already looked a bit into Haskell and watched some videos about i, but I didn't really get into it. So, I'm hoping to at least pick it up this year. Though... if I can find something I can do with it is another question.  \n\nBut... even though I would like to act like I love programming, in reality, I feel like I am a lot more burnt out with it then I wrote about it. That plus schoolwork and the upcoming exams might put a halt to my journey. Not to mention, your daily life just kinda goes to shit when you end up coding for hours...\n\n<!-- This feels like an antipattern... -->\n<div style=\"display: flex;\">\n    <p>\n        <img \n            src=\"https://raw.githubusercontent.com/alternyxx/alternyxx/refs/heads/main/assets/menhera-wave.gif\" \n            alt=\"menhera-wave\" \n            style=\"float: right; height: 100%; margin-block: 0; margin-left: -30px; shape-outside: inset(calc(100% - 140px /*height */) 0 0); object-fit: contain; object-position: bottom;\" \n            class=\"sticker\"\n        >\n        Anyhow, I thank you, the reader, for having this read my first ever blog on my first ever year of programming, as well as my family for having supported me. It has been quite a fun journey and I have many \n        things planned too. I'm hoping to write more blogs as well as make another one like this for next year, so I hope you're able to tune in. This is it for this year!  \n    <p>\n</div>\n"
        }
    ]
}